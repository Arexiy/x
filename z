// –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
(function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const API_KEY = "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";
    const MODEL = "qwen/qwen3-235b-a22b:free";
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–º–æ—â–Ω–∏–∫–∞
    const helper = document.createElement('div');
    helper.id = 'exam-helper';
    helper.style = `
        position: fixed;
        bottom: 15px;
        right: 15px;
        width: 280px;
        max-height: 200px;
        background: rgba(250, 250, 250, 0.92);
        border-radius: 8px;
        z-index: 10000;
        padding: 12px;
        font-family: Arial;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border: 1px solid #eaeaea;
        font-size: 13px;
        overflow: auto;
        backdrop-filter: blur(2px);
        opacity: 0.9;
        transition: all 0.3s ease;
    `;
    
    helper.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
            <div style="font-weight: bold; color: #444;">ü§ñ –≠–∫–∑–∞–º–µ–Ω –ü–æ–º–æ—â–Ω–∏–∫</div>
            <div style="display: flex; gap: 5px;">
                <button id="min-btn" style="background:none; border:none; cursor:pointer; font-size:18px;">‚àí</button>
                <button id="close-btn" style="background:none; border:none; cursor:pointer; font-size:18px;">√ó</button>
            </div>
        </div>
        <div id="helper-content" style="font-size: 13px; line-height: 1.4; color: #333;">
            –ó–∞–≥—Ä—É–∑–∫–∞...
        </div>
        <div style="font-size: 10px; color: #999; text-align: right; margin-top: 5px;">
            Ctrl+Shift+X - —Å–∫—Ä—ã—Ç—å
        </div>
    `;
    
    document.body.appendChild(helper);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º
    document.getElementById('close-btn').addEventListener('click', () => helper.remove());
    document.getElementById('min-btn').addEventListener('click', () => {
        helper.style.transform = helper.style.transform ? '' : 'translateY(calc(100% - 30px))';
    });
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.shiftKey && e.key === 'X') {
            helper.style.display = helper.style.display === 'none' ? 'block' : 'none';
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    async function processQuestion() {
        try {
            // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            const questionElem = document.querySelector('.test-table.active');
            if (!questionElem) return;
            
            const questionText = questionElem.querySelector('.test-question')?.innerText;
            const answers = [];
            
            // –°–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            questionElem.querySelectorAll('.test-answers li').forEach(item => {
                const key = item.querySelector('.test-variant')?.innerText.trim();
                const text = item.querySelector('label').innerText.replace(key, '').trim();
                answers.push({key, text, element: item});
            });
            
            if (!questionText) return;
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: MODEL,
                    messages: [{
                        role: "user",
                        content: `–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).
–í–æ–ø—Ä–æ—Å: ${questionText}
–í–∞—Ä–∏–∞–Ω—Ç—ã: ${answers.map(a => `${a.key}) ${a.text}`).join('; ')}`
                    }],
                    temperature: 0.1,
                    max_tokens: 100
                })
            });
            
            const data = await response.json();
            const aiResponse = data.choices[0].message.content;
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            document.getElementById('helper-content').innerHTML = aiResponse;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
            const keyMatch = aiResponse.match(/[A-–Ø]\)|\b([A-–Ø])\b/);
            if (keyMatch) {
                const answerKey = keyMatch[1] || keyMatch[0].charAt(0);
                const answer = answers.find(a => a.key === answerKey);
                if (answer) {
                    setTimeout(() => {
                        answer.element.querySelector('input[type="radio"]').click();
                    }, 1500);
                }
            }
        } catch (e) {
            document.getElementById('helper-content').innerHTML = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processQuestion();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    setInterval(processQuestion, 5000);
    
    // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    console.log = function(){};
    console.error = function(){};
})();
