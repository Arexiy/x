javascript:(function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const API_KEY = "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";
    const MODEL = "qwen/qwen3-235b-a22b:free";
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–º–æ—â–Ω–∏–∫–∞
    const helper = document.createElement('div');
    helper.id = 'exam-helper';
    helper.style.cssText = `
        position: fixed;
        bottom: 15px;
        right: 15px;
        width: 300px;
        max-height: 250px;
        background: rgba(250, 250, 250, 0.95);
        border-radius: 8px;
        z-index: 10000;
        padding: 15px;
        font-family: Arial, sans-serif;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
        font-size: 14px;
        overflow: auto;
        backdrop-filter: blur(3px);
        opacity: 0.95;
        transition: all 0.3s ease;
        display: block;
    `;
    
    helper.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding-bottom: 8px; border-bottom: 1px solid #eee;">
            <div style="font-weight: bold; font-size: 15px; color: #333;">ü§ñ –≠–∫–∑–∞–º–µ–Ω –ü–æ–º–æ—â–Ω–∏–∫</div>
            <div style="display: flex; gap: 6px;">
                <button id="min-btn" style="background:#f5f5f5; border:1px solid #ddd; border-radius:4px; cursor:pointer; font-size:16px; width:26px; height:26px; display:flex; align-items:center; justify-content:center;">‚àí</button>
                <button id="close-btn" style="background:#f5f5f5; border:1px solid #ddd; border-radius:4px; cursor:pointer; font-size:16px; width:26px; height:26px; display:flex; align-items:center; justify-content:center;">√ó</button>
            </div>
        </div>
        <div id="helper-content" style="font-size: 14px; line-height: 1.5; color: #444; min-height: 60px;">
            <div style="display:flex; align-items:center; gap:10px;">
                <div class="loader" style="border: 3px solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite;"></div>
                <div>–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞...</div>
            </div>
        </div>
        <div style="font-size: 11px; color: #777; text-align: right; margin-top: 8px; padding-top: 8px; border-top: 1px solid #f0f0f0;">
            Ctrl+Shift+X - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å | –°—Ç–∞—Ç—É—Å: <span id="status">–∞–∫—Ç–∏–≤–µ–Ω</span>
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    `;
    
    document.body.appendChild(helper);
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const contentEl = document.getElementById('helper-content');
    const statusEl = document.getElementById('status');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.shiftKey && e.key === 'X') {
            helper.style.display = helper.style.display === 'none' ? 'block' : 'none';
        }
    });
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º
    document.getElementById('close-btn').addEventListener('click', () => helper.remove());
    document.getElementById('min-btn').addEventListener('click', () => {
        helper.style.transform = helper.style.transform ? '' : 'translateY(calc(100% - 40px))';
    });
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    function getCurrentQuestion() {
        try {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö LMS
            const questionElem = document.querySelector('.test-table.active, .question-container, .quiz-question') 
                || document.querySelector('[class*="question"]:not([style*="display:none"])');
            
            if (!questionElem) {
                statusEl.textContent = "–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
                return null;
            }
            
            // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
            const questionText = questionElem.querySelector('.test-question, .question-text, .prompt')?.innerText 
                || questionElem.querySelector('[class*="question"]')?.innerText;
            
            if (!questionText) {
                statusEl.textContent = "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—É—Å—Ç";
                return null;
            }
            
            // –°–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            const answers = [];
            const answerItems = questionElem.querySelectorAll('.test-answers li, .answer-option, .response-item');
            
            answerItems.forEach(item => {
                try {
                    const keyElement = item.querySelector('.test-variant, .option-key, .response-label');
                    const key = keyElement?.innerText.trim().replace(/[.:)]/g, '') || '?';
                    
                    const textElement = item.querySelector('label, .option-text, .response-text');
                    const text = textElement?.innerText.replace(keyElement?.innerText || '', '').trim() 
                        || item.innerText.replace(keyElement?.innerText || '', '').trim();
                    
                    answers.push({
                        key,
                        text,
                        element: item,
                        input: item.querySelector('input[type="radio"], input[type="checkbox"]')
                    });
                } catch (e) {
                    console.error("Error parsing answer:", e);
                }
            });
            
            return {
                question: questionText,
                answers,
                element: questionElem
            };
        } catch (error) {
            statusEl.textContent = "–æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö";
            contentEl.innerHTML = `<div style="color:#d32f2f;">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            return null;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    async function getAIResponse(questionData) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        try {
            statusEl.textContent = "–∑–∞–ø—Ä–æ—Å –∫ –ò–ò...";
            
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: MODEL,
                    messages: [{
                        role: "user",
                        content: `–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: [–ë–£–ö–í–ê]
2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]

–í–æ–ø—Ä–æ—Å: ${questionData.question.substring(0, 1000)} 
–í–∞—Ä–∏–∞–Ω—Ç—ã: 
${questionData.answers.slice(0, 10).map(a => `[${a.key}] ${a.text.substring(0, 200)}`).join('\n')}`
                    }],
                    temperature: 0.2,
                    max_tokens: 150
                }),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            return data.choices[0]?.message?.content.trim();
            
        } catch (error) {
            clearTimeout(timeoutId);
            statusEl.textContent = "–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return getFallbackResponse(questionData);
        }
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    function getFallbackResponse(questionData) {
        statusEl.textContent = "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑";
        
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        const keywords = ["–≤–µ—Ä–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–¥–∞", "true", "yes", "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "—è–≤–ª—è–µ—Ç—Å—è"];
        const answers = questionData.answers;
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        for (let i = 0; i < answers.length; i++) {
            if (keywords.some(kw => answers[i].text.toLowerCase().includes(kw))) {
                return `1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${answers[i].key}\n2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞`;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        const longestAnswer = answers.reduce((longest, current) => 
            current.text.length > longest.text.length ? current : longest, answers[0]);
        
        return `1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${longestAnswer.key}\n2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –°–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞`;
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async function processQuestion() {
        statusEl.textContent = "–ø–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞...";
        const questionData = getCurrentQuestion();
        
        if (!questionData || !questionData.answers || questionData.answers.length === 0) {
            contentEl.innerHTML = "<div>–í–æ–ø—Ä–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑.</div>";
            return;
        }
        
        try {
            contentEl.innerHTML = `<div style="display:flex;align-items:center;gap:10px;">
                <div class="loader" style="border:3px solid #f3f3f3;border-top:3px solid #3498db;border-radius:50%;width:24px;height:24px;animation:spin 1s linear infinite;"></div>
                <div>–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞...</div>
            </div>`;
            
            statusEl.textContent = "–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...";
            const aiResponse = await getAIResponse(questionData);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            let formattedResponse = aiResponse;
            const keyMatch = aiResponse.match(/–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\s*([A-–Ø0-9])/i);
            
            if (keyMatch) {
                formattedResponse = aiResponse.replace(
                    /(–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\s*)([A-–Ø0-9])/i, 
                    '$1<span style="background-color:#e8f5e9; padding:2px 6px; border-radius:4px; font-weight:bold;">$2</span>'
                );
            }
            
            contentEl.innerHTML = formattedResponse.replace(/\n/g, '<br>');
            statusEl.textContent = "–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω";
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
            if (keyMatch) {
                const answerKey = keyMatch[1];
                const answer = questionData.answers.find(a => a.key === answerKey);
                
                if (answer && answer.input) {
                    setTimeout(() => {
                        answer.input.click();
                        statusEl.textContent = "–≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç " + answerKey;
                    }, 2000);
                }
            }
            
        } catch (error) {
            contentEl.innerHTML = `<div style="color:#d32f2f;">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            statusEl.textContent = "–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏";
        }
    }
    
    // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    const originalConsole = { log: console.log, error: console.error };
    console.log = function() {};
    console.error = function() {};
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ console –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    helper.querySelector('#close-btn').addEventListener('click', () => {
        console.log = originalConsole.log;
        console.error = originalConsole.error;
    });
    
    // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processQuestion();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    let processInterval = setInterval(processQuestion, 10000);
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    helper.querySelector('#close-btn').addEventListener('click', () => {
        clearInterval(processInterval);
    });
    
    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            helper.style.display = 'none';
        } else {
            helper.style.display = 'block';
        }
    });
})();
