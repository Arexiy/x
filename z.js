javascript:(function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const API_KEY = "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";
    const MODEL = "qwen/qwen3-235b-a22b:free";
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–º–æ—â–Ω–∏–∫–∞
    const helper = document.createElement('div');
    helper.id = 'exam-helper';
    helper.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 320px;
        max-height: 280px;
        background: rgba(255, 255, 255, 0.97);
        border-radius: 10px;
        z-index: 10000;
        padding: 15px;
        font-family: Arial, sans-serif;
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        border: 1px solid #ddd;
        font-size: 14px;
        overflow: auto;
        backdrop-filter: blur(4px);
        opacity: 0.98;
        transition: all 0.3s ease;
        display: block;
    `;
    
    helper.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding-bottom: 10px; border-bottom: 1px solid #eee;">
            <div style="font-weight: bold; font-size: 16px; color: #2c3e50;">ü§ñ –≠–∫–∑–∞–º–µ–Ω –ü–æ–º–æ—â–Ω–∏–∫</div>
            <div style="display: flex; gap: 8px;">
                <button id="min-btn" style="background:#f0f5ff; border:1px solid #d0d9ff; border-radius:5px; cursor:pointer; font-size:17px; width:28px; height:28px; display:flex; align-items:center; justify-content:center; color:#4a6cf7;">‚àí</button>
                <button id="close-btn" style="background:#fff0f0; border:1px solid #ffd0d0; border-radius:5px; cursor:pointer; font-size:17px; width:28px; height:28px; display:flex; align-items:center; justify-content:center; color:#f74a4a;">√ó</button>
            </div>
        </div>
        <div id="helper-content" style="font-size: 14px; line-height: 1.5; color: #34495e; min-height: 70px; padding: 10px 0;">
            <div style="display:flex; align-items:center; gap:12px;">
                <div class="loader" style="border: 4px solid rgba(52, 152, 219, 0.2); border-top: 4px solid #3498db; border-radius: 50%; width: 28px; height: 28px; animation: spin 1s linear infinite;"></div>
                <div>–ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...</div>
            </div>
        </div>
        <div style="font-size: 12px; color: #7f8c8d; text-align: right; margin-top: 10px; padding-top: 10px; border-top: 1px solid #f5f5f5;">
            –°—Ç–∞—Ç—É—Å: <span id="status">–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</span> | Ctrl+Shift+X
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            #helper-content .answer-highlight {
                background-color: #e8f5e9;
                padding: 2px 6px;
                border-radius: 4px;
                font-weight: bold;
                color: #2e7d32;
            }
        </style>
    `;
    
    document.body.appendChild(helper);
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const contentEl = document.getElementById('helper-content');
    const statusEl = document.getElementById('status');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.shiftKey && e.key === 'X') {
            helper.style.display = helper.style.display === 'none' ? 'block' : 'none';
        }
    });
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º
    document.getElementById('close-btn').addEventListener('click', () => helper.remove());
    document.getElementById('min-btn').addEventListener('click', () => {
        helper.style.transform = helper.style.transform ? '' : 'translateY(calc(100% - 45px))';
    });
    
    // 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    function findQuestions() {
        statusEl.textContent = "–ø–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤...";
        
        // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        const questionSelectors = [
            '.test-table', '.question', '.quiz-item', 
            '.exam-question', '.test-question', '.assessment-item',
            '[id*="question"]', '[class*="question"]', 
            '[id*="test"]', '[class*="test"]',
            '.question-container', '.question-wrapper'
        ];
        
        const questions = [];
        
        // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        questionSelectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                const questionText = el.innerText.trim();
                if (questionText.length > 10 && !questions.some(q => q.element === el)) {
                    questions.push({
                        element: el,
                        text: questionText.substring(0, 300),
                        answers: []
                    });
                }
            });
        });
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if (questions.length === 0) {
            statusEl.textContent = "–∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...";
            
            // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ (–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤)
            document.querySelectorAll('input[type="radio"], input[type="checkbox"]').forEach(input => {
                const container = input.closest('li, div, tr, .option, .answer');
                if (container) {
                    const questionContainer = container.closest('div, table, form, section');
                    if (questionContainer && !questions.some(q => q.element === questionContainer)) {
                        const questionText = questionContainer.innerText.substring(0, 300);
                        questions.push({
                            element: questionContainer,
                            text: questionText,
                            answers: []
                        });
                    }
                }
            });
        }
        
        return questions;
    }
    
    // 2. –°–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    function findAnswers(questionElement) {
        const answers = [];
        
        // –ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        const answerContainers = questionElement.querySelectorAll(
            '.test-answers, .answers, .options, .choices, .response-list, li, .option'
        );
        
        answerContainers.forEach(container => {
            // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
            const inputs = container.querySelectorAll('input[type="radio"], input[type="checkbox"]');
            
            inputs.forEach(input => {
                try {
                    // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                    const textElement = input.closest('label') || 
                                      input.nextElementSibling ||
                                      input.parentNode;
                    
                    let answerText = textElement?.innerText.trim() || '';
                    
                    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    answerText = answerText
                        .replace(/^\s*[A-Za-z0-9][.)]\s*/, '')  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ç–∏–ø–∞ "A. "
                        .replace(/\s+/g, ' ')
                        .substring(0, 200);
                    
                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ (A, B, C...)
                    let key = '?';
                    const keyMatch = textElement?.innerText.match(/^\s*([A-Za-z0-9])[.)]/);
                    if (keyMatch) key = keyMatch[1].toUpperCase();
                    
                    answers.push({
                        key,
                        text: answerText,
                        element: container,
                        input
                    });
                } catch (e) {
                    console.error("Error parsing answer:", e);
                }
            });
        });
        
        return answers;
    }
    
    // 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    function getCurrentQuestion() {
        try {
            // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            const questions = findQuestions();
            if (questions.length === 0) return null;
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å —Å –∫–ª–∞—Å—Å–æ–º "active"
            let activeQuestion = questions.find(q => 
                q.element.classList.contains('active') || 
                q.element.classList.contains('current')
            );
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if (!activeQuestion) {
                statusEl.textContent = "–ø–æ–∏—Å–∫ –≤–∏–¥–∏–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...";
                const viewportHeight = window.innerHeight;
                
                for (const q of questions) {
                    const rect = q.element.getBoundingClientRect();
                    if (rect.top >= 0 && rect.bottom <= viewportHeight + 200) {
                        activeQuestion = q;
                        break;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            if (!activeQuestion) {
                statusEl.textContent = "–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å";
                activeQuestion = questions[0];
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            activeQuestion.answers = findAnswers(activeQuestion.element);
            
            return activeQuestion;
        } catch (error) {
            statusEl.textContent = "–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞";
            contentEl.innerHTML = `<div style="color:#e74c3c;">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            return null;
        }
    }
    
    // 4. –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
    async function getAIResponse(questionData) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);
        
        try {
            statusEl.textContent = "–∑–∞–ø—Ä–æ—Å –∫ –ò–ò...";
            contentEl.innerHTML = `<div style="display:flex;align-items:center;gap:12px;">
                <div class="loader" style="border:4px solid rgba(52,152,219,0.2);border-top:4px solid #3498db;border-radius:50%;width:28px;height:28px;animation:spin 1s linear infinite;"></div>
                <div>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...</div>
            </div>`;
            
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: MODEL,
                    messages: [{
                        role: "user",
                        content: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: [–ë–£–ö–í–ê]
2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]

–í–æ–ø—Ä–æ—Å: ${questionData.text.substring(0, 1000)} 
–í–∞—Ä–∏–∞–Ω—Ç—ã: 
${questionData.answers.slice(0, 10).map(a => `[${a.key}] ${a.text.substring(0, 200)}`).join('\n')}`
                    }],
                    temperature: 0.2,
                    max_tokens: 150
                }),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
            }
            
            const data = await response.json();
            return data.choices[0]?.message?.content.trim();
            
        } catch (error) {
            clearTimeout(timeoutId);
            statusEl.textContent = "–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
            return getFallbackResponse(questionData);
        }
    }
    
    // 5. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async function processQuestion() {
        try {
            const questionData = getCurrentQuestion();
            
            if (!questionData) {
                contentEl.innerHTML = `
                    <div style="background:#fff8e1; padding:15px; border-radius:8px; border-left:4px solid #ffc107;">
                        <h4 style="margin-top:0; color:#d35400;">–í–æ–ø—Ä–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</h4>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</p>
                        <ul style="padding-left:20px;">
                            <li>–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑</li>
                            <li>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É</li>
                            <li>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞</li>
                        </ul>
                        <p style="margin-bottom:0;">–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—Ç—å...</p>
                    </div>
                `;
                return;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            statusEl.textContent = "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...";
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
            const aiResponse = await getAIResponse(questionData);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            let formattedResponse = aiResponse;
            const keyMatch = aiResponse.match(/–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\s*([A-–Ø0-9])/i);
            
            if (keyMatch) {
                formattedResponse = aiResponse.replace(
                    /(–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\s*)([A-–Ø0-9])/i, 
                    '$1<span class="answer-highlight">$2</span>'
                );
            }
            
            contentEl.innerHTML = formattedResponse.replace(/\n/g, '<br>');
            statusEl.textContent = "–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω";
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
            if (keyMatch) {
                const answerKey = keyMatch[1];
                const answer = questionData.answers.find(a => a.key === answerKey);
                
                if (answer && answer.input) {
                    setTimeout(() => {
                        answer.input.click();
                        statusEl.textContent = "–≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç " + answerKey;
                        
                        // –ü–æ–º–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        contentEl.innerHTML += `<div style="margin-top:10px; padding:8px; background:#e8f5e9; border-radius:5px; border-left:3px solid #4caf50;">
                            ‚úîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç ${answerKey}
                        </div>`;
                    }, 2000);
                }
            }
            
        } catch (error) {
            contentEl.innerHTML = `<div style="color:#e74c3c; padding:10px; background:#fdefef; border-radius:5px;">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            statusEl.textContent = "–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏";
        }
    }
    
    // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    console.log = function() {}; // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    processQuestion();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    let processInterval = setInterval(processQuestion, 10000);
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    helper.querySelector('#close-btn').addEventListener('click', () => {
        clearInterval(processInterval);
    });
    
    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        helper.style.display = document.visibilityState === 'visible' ? 'block' : 'none';
    });
})();
